/*
 * Sort.hpp
 *
 *  Created on: Oct 17, 2016
 *      Author: ouyan
 */

#ifndef SORT_HPP_
#define SORT_HPP_
#include <cstddef>
#include <vector>
class Sort {
public:
	Sort() {

	}
	virtual ~Sort() {

	}

	template <typename Iter>
	struct PointToType {
		typedef typename Iter::value_type value_type;
	};
	template <typename T>
	struct PointToType<T*> {
		typedef T value_type;
	};

	template<class Type>
	static inline bool lessThan(Type &a, Type &b) {
		return (a < b);
	}

	//BubbleSort O(n^2)
	template<class Type, class Condition>
	static inline void BubbleSort(Type *a, unsigned int size, Condition compare) {
		unsigned int i=0, j=0;
		bool ordered=false;
		for (i=0;i<size-1;i++) {
			ordered=true;
			for (j=size-1;j>=i+1;j--) {
				if (compare(a[j], a[j-1])) {
					ordered=false;
					swap(a[j-1], a[j]);
				}
			}
			if (ordered) {
				break;
			}
		}
	}
	template<class Type>
	static inline void BubbleSort(Type *a, unsigned int size) {
		unsigned int i=0, j=0;
		bool ordered = false;
		for (i=0;i<size-1;i++) {
			ordered=true;
			for (j=size-1;j>=i+1;j--) {
				if (a[j] <  a[j-1]) {
					ordered=false;
					swap(a[j-1], a[j]);
				}
			}
			if (ordered) {
				break;
			}
		}
	}

	//SelectionSort O(n^2)
	template<class Type, class Condition>
	static inline void SelectionSort(Type *a, unsigned int size, Condition compare) {
		unsigned int i=0, j=0;
		unsigned int smallestindex=0;
		for (i=0;i<size-1;i++) {
			smallestindex=i;
			for (j=i+1;j<size;j++) {
				if (compare(a[j], a[smallestindex])) {
					smallestindex=j;
				}
			}
			if (smallestindex != i) {
				swap(a[smallestindex], a[i]);
			}

		}
	}
	template<class Type>
	static inline void SelectionSort(Type *a, unsigned int size) {
		unsigned int i=0, j=0;
		unsigned int smallestindex=0;
		for (i=0;i<size-1;i++) {
			smallestindex=i;
			for (j=i+1;j<size;j++) {
				if (a[j] < a[smallestindex]) {
					smallestindex=j;
				}
			}
			if (smallestindex != i) {
				swap(a[smallestindex], a[i]);
			}

		}
	}

	//InsertionSort O(n^2)
	template<class Type, class Condition>
	static inline void InsertionSort(Type *a, int size, Condition compare) {
		int i=0, j=0;
		Type temp(a[0]);
		for (i=1;i<size;i++) {
			temp=a[i];
			for (j=i-1;j>=0 && compare(temp, a[j]);j--) {
				a[j+1]=a[j];
			}
			a[j+1]=temp;
		}
	}
	template<class Type>
	static inline void InsertionSort(Type *a, int size) {
		int i=0, j=0;
		Type temp(a[0]);
		for (i=1;i<size;i++) {
			temp=a[i];
			for (j=i-1;j>=0 && temp < a[j];j--) {
				a[j+1]=a[j];
			}
			a[j+1]=temp;
		}
	}


	//ShellSort O(n^(3/2))?
	template<class Type, class Condition>
	static inline void ShellSort(Type *a, int size, Condition compare) {
		int i=0, j=0;
		Type temp(a[0]);
		int gap=size;

		do {
			gap=gap/3+1;
			for (i=gap;i<size;i+=gap) {
				temp=a[i];
				for (j=i-gap;j>=0 && compare(temp, a[j]);j-=gap) {
					a[j+gap]=a[j];
				}
				a[j+gap]=temp;
			}
		} while (gap>1);

	}
	template<class Type>
	static inline void ShellSort(Type *a, int size) {
		int i=0, j=0;
		Type temp(a[0]);
		int gap=size;

		do {
			gap=gap/3+1;
			for (i=gap;i<size;i+=gap) {
				temp=a[i];
				for (j=i-gap;j>=0 && temp < a[j];j-=gap) {
					a[j+gap]=a[j];
				}
				a[j+gap]=temp;
			}
		} while (gap>1);

	}

//	template <class Iter>
//	static void mergeSort(Iter begin, Iter end) {
//		typedef typename Sort::PointToType<Iter>::value_type value_type;
//		value_type *temp = new value_type[static_cast<size_t>(end - begin)];
//		mergeSortBase(begin, end, temp);
//		delete [] temp;
//		return;
//	}

	template <class Iter, class Compare =
			bool(typename Sort::PointToType<Iter>::value_type &,
					typename Sort::PointToType<Iter>::value_type &)
					>
	static void mergeSort(Iter begin, Iter end, Compare compare =
			/*[](typename Sort::PointToType<Iter>::value_type &a,
					typename Sort::PointToType<Iter>::value_type &b){return a < b;}*/
			lessThan<typename Sort::PointToType<Iter>::value_type>
	) {
		typedef typename Sort::PointToType<Iter>::value_type value_type;
		value_type *temp = new value_type[static_cast<size_t>(end - begin)];
		mergeSortBase(begin, end, temp, compare);
		delete [] temp;
		return;
	}

	template <class Iter, class Compare =
			bool(typename Sort::PointToType<Iter>::value_type &,
					typename Sort::PointToType<Iter>::value_type &)
					>
	static void heapSort(Iter begin, Iter end, Compare compare =
			lessThan<typename Sort::PointToType<Iter>::value_type>
	) {
		if (begin >= end) return;
		heapify(begin, end, compare);
		for (Iter i = end - 1; i > begin; i--) {
			swap(*begin, *i);
			Sort::heapFixdown(begin, begin, i, compare);
		}
	}

//	template <typename Iter, typename Compare =
//			bool(typename Sort::PointToType<Iter>::value_type &,
//					typename Sort::PointToType<Iter>::value_type &)
//			>
//	static void quickSort(Iter begin, Iter end, Compare compare =
//			lessThan<typename Sort::PointToType<Iter>::value_type>
//	) {
//		typedef typename Sort::PointToType<Iter>::value_type value_type;
//
//		if (begin < end) {
//			Iter i = begin;
//			Iter j = end - 1;
//			value_type temp = (*i);
//			while (i < j) {
////				printf("i=%lu\n", i);
//				while ((i < j) && (!compare(*j, temp))) {
//					j--;
//				}
//				if (i < j) {
//					(*i) = (*j);
//					i++;
//				}
//				while ((i < j) && compare(*i, temp)) {
//					i++;
//				}
//				if (i < j) {
//					(*j) = (*i);
//					j--;
//				}
//
//			}
//			(*i) = temp;
////			puts("Recursion");
//			quickSort(begin, i, compare);
//			quickSort(i + 1, end, compare);
//		}
//	}

	template <typename Iter>
	static void quickSort(Iter begin, Iter end) {
		Iter i = begin;
		Iter j = --end;
		Iter pivot = i;
		if (begin == end || begin == ++end) return;
		while (true) {
			while (!(*j < *pivot) && i != j) j--;
			while ((*i < *pivot || i == pivot) && i != j) j++;
			if (i == j) break;
			swap(*i, *j);
		}
		swap(*pivot, *i);
		quickSort(begin, i);
		quickSort(++i, end);
	}

	template <typename Iter, typename C>
	static void quickSort(Iter begin, Iter end, C compare) {
		Iter i = begin;
		Iter j = --end;
		Iter pivot = i;
		if (begin == end || begin == ++end) return;
		while (true) {
			while (!(compare(*j, *pivot)) && i != j) j--;
			while ((compare(*i, *pivot) || i == pivot) && i != j) j++;
			if (i == j) break;
			swap(*i, *j);
		}
		swap(*pivot, *i);
		quickSort(begin, i, compare);
		quickSort(++i, end, compare);
	}

//	template <typename T, typename Compare =
//			bool(typename Sort::PointToType<T*>::value_type &,
//			typename Sort::PointToType<T*>::value_type &)
//			>
//	static void quickSort(/*int a[], */ T *begin, T *end, Compare compare =
//			lessThan<typename Sort::PointToType<T*>::value_type>
//	) {
//		typedef typename Sort::PointToType<T*>::value_type value_type;
//		if (begin < end) {
//			T *i = begin;
//			T *j = end - 1;
//			value_type temp = (*i);
//			while (i < j) {
//				while ((i < j) && !compare((*j), temp) /*!(a[j] > temp)*/) {
//					j--;
//				}
//				if (i < j) {
//					(*i) = (*j);
//					i++;
//				}
//				while ((i < j) && compare((*i), temp) /*(a[i] > temp)*/) {
//					i++;
//				}
//				if (i < j) {
//					(*j) = (*i);
//					j--;
//				}
//			}
//			(*i) = temp;
//			quickSort(begin, i, compare);
//			quickSort(i + 1, end, compare);
//		}
//	}

private:
	template<class Type>
	static inline void swap(Type &a, Type &b) {
		Type temp(a);
		a=b;
		b=temp;
	}

	template<class Type>
	static inline Type max(Type &a, Type &b) {
		return (a<b)?b:a;
	}

	template<class Type>
	static inline Type min(Type &a, Type &b) {
		return (a<b)?a:b;
	}



//	template<class Iter, class T>
//	static void mergeArray(Iter &begin, Iter &mid, Iter &end, T *temp) {
//		Iter i = begin, j = mid;
//		size_t k = 0;
//		while (i < mid && j < end) {
//			if ((*i) < (*j)) {
//				temp[k++] = (*i++);
//			} else {
//				temp[k++] = (*j++);
//			}
//		}
//		while (i < mid) {
//			temp[k++] = (*i++);
//		}
//		while (j < end) {
//			temp[k++] = (*j++);
//		}
//		Iter a = begin;
//		for (size_t b = 0; b < k; b++) {
//			(*a++) = temp[b];
//		}
//	}

	template<class Iter, class T, class Compare>
	static void mergeArray(Iter &begin, Iter &mid, Iter &end, T *temp, Compare &compare) {
		Iter i = begin, j = mid;
		size_t k = 0;
		while (i < mid && j < end) {
			if (compare((*i), (*j))) {
				temp[k++] = (*i++);
			} else {
				temp[k++] = (*j++);
			}
		}
		while (i < mid) {
			temp[k++] = (*i++);
		}
		while (j < end) {
			temp[k++] = (*j++);
		}
		Iter a = begin;
		for (size_t b = 0; b < k; b++) {
			(*a++) = temp[b];
		}
	}

//	template <class Iter, class T>
//	static void mergeSortBase(Iter &begin, Iter &end, T *temp) {
//		if (begin + 1 == end) return;
//		if (begin + 2 == end) {
//			if ((*(begin + 1)) < (*begin)) {
//				swap((*begin), (*(begin + 1)));
//			}
//			return;
//		}
//		if (begin < end) {
//			Iter mid = begin;
//			Iter i = begin;
//			while ((i + 1) != end && (i + 2) != end) {
//				i += 2;
//				mid++;
//			}
//			mergeSortBase(begin, mid, temp);
//			mergeSortBase(mid, end, temp);
//			mergeArray(begin, mid, end, temp);
//		}
//	}

	template <class Iter, class T, class Compare>
	static void mergeSortBase(Iter &begin, Iter &end, T *temp, Compare &compare) {
		if (begin + 1 == end) return;
		if (begin + 2 == end) {
			Iter second = begin + 1;
			if (compare((*second), (*begin))) {
				swap((*begin), (*second));
			}
			return;
		}
		if (begin < end) {
//			Iter mid = begin;
//			Iter i = begin;
//			while ((i + 1) < end && (i + 2) < end) {
//				i += 2;
//				mid++;
//			}
			Iter mid = begin + (end - begin) / 2;
			mergeSortBase(begin, mid, temp, compare);
			mergeSortBase(mid, end, temp, compare);
			mergeArray(begin, mid, end, temp, compare);
		}
	}

	template <typename T, typename Compare>
	static void insertHeap(std::vector<T> &a, const T & target, Compare compare) {
		a.push_back(target);
		size_t i = a.size() - 1;
		size_t parent = (i-1)/2;
		T temp = a[i];
		while (i != 0) {
			if (!compare(a[parent], temp)) {
				break;
			}

			a[i] = a[parent];
			i = parent;
			if (i-1>i) break;
			parent = (i-1)/2;
		}
		a[i] = temp;
	}

	template <typename Iter, typename Compare>
	static void heapFixdown(Iter begin, Iter start, Iter end, Compare compare) {
		Iter parent = start;
		Iter lchild = begin+((parent-begin)*2+1);
		Iter rchild = lchild + 1;
		Iter currentchild = lchild;
		typename Sort::PointToType<Iter>::value_type temp = *parent;
		while (lchild < end) {
			if (rchild < end && !compare(*rchild, *lchild)) {
				currentchild = rchild;
			}

			if (!compare(temp, *currentchild)) {
				break;
			}

			*parent = *currentchild;
			parent = currentchild;
			lchild = begin+((parent-begin)*2+1);
			rchild = lchild + 1;
			currentchild = lchild;
		}
		*parent = temp;
		return;

	}

	template <typename Iter, typename Compare>
	static inline void heapify(Iter begin, Iter end, Compare compare) {
		size_t size = static_cast<size_t>(end - begin);
		for (long i = size / 2 - 1; i >= 0; i--) {
			Sort::heapFixdown(begin, begin + i, end, compare);
		}
	}




};

#endif /* SORT_HPP_ */
